// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Category {
    id                  String                @id @default(uuid())
    name                String
    description         String?
    ProjectCategory     ProjectCategory[]
    RatingRelationships RatingRelationships[]
}

model Project {
    id                  String                @id @default(uuid())
    name                String
    description         String?
    url                 String
    RatingRelationships RatingRelationships[]
    ProjectLocation     ProjectLocation[]
    ProjectCategory     ProjectCategory[]
    WorseRating         WorseRating[]
    BetterRating        BetterRating[]
}

model Location {
    id                 String               @id @default(uuid())
    number             Int                  @unique
    beingJudged        Boolean              @default(false)
    noShow             Boolean              @default(false)
    JudgeRelationships JudgeRelationships[]
    ProjectLocation    ProjectLocation[]
}

model Judge {
    id                   String                @id @default(uuid())
    name                 String
    description          String?
    profilePictureUrl    String?
    endingTimeAtLocation DateTime?
    JudgeRelationships   JudgeRelationships[]
    RatingRelationships  RatingRelationships[]
}

// Below are relationship tables, which help us match up values when needed.
model JudgeRelationships {
    judge      Judge    @relation(fields: [judgeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    judgeId    String
    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    locationId String

    @@id([judgeId, locationId])
}

model ProjectLocation {
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId  String
    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    locationId String

    @@id([projectId, locationId])
}

model ProjectCategory {
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    projectId  String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String

    @@id([projectId, categoryId])
}

model Rating {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    RatingRelationships RatingRelationships[]
    WorseRating         WorseRating[]
    BetterRating        BetterRating[]
}

model RatingRelationships {
    rating     Rating   @relation(fields: [ratingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ratingId   String
    judge      Judge    @relation(fields: [judgeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    judgeId    String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId String
    Project    Project? @relation(fields: [projectId], references: [id])
    projectId  String?

    @@id([ratingId, judgeId, categoryId])
}

model WorseRating {
    rating         Rating  @relation(fields: [ratingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ratingId       String
    projects       Project @relation(fields: [worseProjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    worseProjectId String

    @@id([ratingId])
}

model BetterRating {
    rating          Rating  @relation(fields: [ratingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ratingId        String
    projects        Project @relation(fields: [betterProjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    betterProjectId String

    @@id([ratingId])
}
