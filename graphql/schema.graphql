type Profile {
  name: String!
  description: String
  profilePictureUrl: String
}

type Category {
  id: ID!
  name: String!
  description: String
  rankedProjects: [Project]!
}

type Rating {
  id: ID!
  judge: Judge!
  project: Project!
  lastProject: Project
  betterThanLast: Boolean!
}

type Project {
  name: String!
  description: String
  url: String
  categories: [Category]!
}

type Judge {
  id: ID!
  profile: Profile!
  atLocation: Location
  endingTimeAtLocation: Int
  unjudgedLocations: [Location]!
  judgedLocations: [Location]!
}

type Organizer {
  id: ID!
  profile: Profile!
}

type Location {
  id: ID!
  number: Int!
  beingJudged: Boolean!
  assignedProject: Project
  assignedJudges: [Judge]!
  noShow: Boolean!
}

input ProfileInput {
  name: String!
  description: String
  profilePictureUrl: String
}

input ProjectInput {
  name: String!
  description: String
  url: String
  bannerUrl: String
  categoryIds: [ID!]!
}

type Query {
  location(id: [ID!]): [Location]
  judge(id: [ID!]): [Judge]
}

type Mutation {
  createProject(project: [ProjectInput!]!): [Project]

  createCategory(name: String!, description: String): Category

  createLocation(number: Int): Location
  assignJudgesToLocation(judgeId: [ID!]!, locationId: ID!): Location
  unassignJudgesFromLocation(judgeId: [ID!]!, locationId: ID!): Location
  judgeVisitingLocation(
    judgeId: ID!
    locationId: ID!
    endingTimeAtLocation: Int
  ): Location
  setLocationProject(projectId: ID!): Location

  createJudge(profile: ProfileInput!): Judge
}

type Subscription {
  uptime: Int
  location(id: ID!): Location
}
