type Profile {
  name: String!
  description: String
  profilePictureUrl: String
}

type Category {
  id: ID!
  name: String!
  description: String
}

type Rating {
  id: ID!
  judge: Judge!
  project: Project!
  betterProject: Project
  worseProject: Project
  category: Category!
}

type Project {
  id: ID!
  name: String!
  description: String
  url: String
  categories: [Category!]!
}

type ScoredProject {
  project: Project!
  score: Float!
}

type Judge {
  id: ID!
  profile: Profile!
  atLocation: Location
  endingTimeAtLocation: Int
  unjudgedLocations: [Location]!
  judgedLocations: [Location]!
}

type Organizer {
  id: ID!
  profile: Profile!
}

type Location {
  id: ID!
  number: Int!
  beingJudged: Boolean!
  assignedProject: Project
  assignedJudges: [Judge]!
  noShow: Boolean!
}

input ProfileInput {
  name: String!
  description: String
  profilePictureUrl: String
}

input ProjectInput {
  name: String!
  description: String
  url: String
  categoryIds: [ID!]!
}

type Query {
  location(ids: [ID!]): [Location]
  judge(ids: [ID!]): [Judge]
  project(ids: [ID!]): [Project]
  category(ids: [ID!]): [Category]
  rating(ids: [ID!], categoryId: ID, judge: ID): [Rating]
  rankedProjects(categoryId: ID!): [ScoredProject!]!
}

type Mutation {
  createProjects(projects: [ProjectInput!]!): [Project]
  clearProjects: Int

  createCategory(name: String!, description: String): Category

  # Note: if lastRatingId is not provided, but the judge has judged before, we will retreive the last project from the database.
  # This is slower, and when possible, you should provide the lastRatingId.
  setRating(
    judgeId: ID!
    projectId: ID!
    categoryId: ID!
    currentProjectIsBetter: Boolean
  ): Rating

  createLocation(number: Int): Location
  assignJudgesToLocation(judgeIds: [ID!]!, locationId: ID!): Location
  unassignJudgesFromLocation(judgeIds: [ID!]!, locationId: ID!): Location
  judgeVisitingLocation(
    judgeId: ID!
    locationId: ID!
    endingTimeAtLocation: Int
  ): Location
  setLocationProject(projectId: ID!, locationId: ID!): Location

  createJudge(profile: ProfileInput!): Judge
}

type Subscription {
  uptime: Int
  location(id: ID!): Location
}
